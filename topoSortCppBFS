#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
	vector<int> topoo(int N, vector<int> adj[])
	{
		queue<int> q;
		vector<int> indegree(N, 0);
		for (int i = 0; i < N; i++)
		{
			for (auto it : adj[i])
			{
				if (it != -1)
				{
					indegree[it]++;
				}
			}
		}

		for (int i = 0; i < N; i++)
		{
			if (indegree[i] == 0)
			{
				q.push(i);
			}
		}
		vector<int> topo;
		while (!q.empty())
		{
			int node = q.front();
			q.pop();
			topo.push_back(node);
			for (auto it : adj[node])
			{
				if (it != -1)
				{
					indegree[it]--;
					if (indegree[it] == 0)
					{
						q.push(it);
					}
				}
			}
		}
		return topo;
	}
};

int main()
{

	int t;
	cin >> t;
	while (t--)
	{
		int V, E;
		cin >> V >> E;

		vector<int> adj[V];

		for (int i = 0; i < E; i++)
		{
			int u, v;
			cin >> u >> v;

			if (v == -1)
			{
				E++;
			}
			adj[u].push_back(v);
		}

		Solution obj;
		vector<int> result = obj.topoo(V, adj);
		cout << "topological sort :";
		for (auto k : result)
		{
			cout << k << " ";
		}
		cout << endl;
	}

	return 0;
}

/*
test case:
1
6 6
0 -1
1 -1
2 3
3 1
4 0
4 1
5 0
5 2
*/
